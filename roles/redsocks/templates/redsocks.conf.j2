base {
	log_info = on;
	log = "syslog:daemon";
	daemon = on;
	user = redsocks;
	group = redsocks;
	redirector = iptables;
}

redsocks {
	local_ip = {{ redsocks_ip }};
	local_port = {{ redsocks_proxy_pl_local }};
	ip = {{ redsocks_proxy_pl_host }};
	port = {{ redsocks_proxy_pl_port }};
	type = socks5;
	login = {{ redsocks_proxy_pl_user }};
	password = {{ redsocks_proxy_pl_pass }};
}

redsocks {
	local_ip = {{ redsocks_ip }};
	local_port = {{ redsocks_proxy_uk_local }};
	ip = {{ redsocks_proxy_uk_host }};
	port = {{ redsocks_proxy_uk_port }};
	type = socks5;
	login = {{ redsocks_proxy_uk_user }};
	password = {{ redsocks_proxy_uk_pass }};
}

redsocks {
	local_ip = {{ redsocks_ip }};
	local_port = {{ redsocks_proxy_us_local }};
	ip = {{ redsocks_proxy_us_host }};
	port = {{ redsocks_proxy_us_port }};
	type = socks5;
	login = {{ redsocks_proxy_us_user }};
	password = {{ redsocks_proxy_us_pass }};
}

redudp {
	local_ip = 127.0.0.1;
	local_port = 10053;

	ip = 192.0.2.1;
	port = 8888;
	login = l;
	password = p;

	// kernel does not give us this information, so we have to duplicate it
	// in both iptables rules and configuration file.  By the way, you can
	// set `local_ip' to 127.45.67.89 if you need more than 65535 ports to
	// forward ;-)
	// This limitation may be relaxed in future versions using contrack-tools.
	dest_ip = 192.0.2.2;
	dest_port = 53;

	udp_timeout = 30;
	udp_timeout_stream = 180;
}

dnstc {
	// fake and really dumb DNS server that returns "truncated answer" to
	// every query via UDP, RFC-compliant resolver should repeat same query
	// via TCP in this case.
	local_ip = 127.0.0.1;
	local_port = 5300;
}
